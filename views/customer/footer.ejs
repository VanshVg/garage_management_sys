<script>
  // const socketIO = io("");
  socketIO.on("newServiceAdded", () => {
    if (parseInt(localStorage.getItem("index")) == 3) {
      steps.service();
    }
  });
  /*Map */

  const getUserLocation = async () => {
    let location = await new Promise((resolve, reject) => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
          resolve([position.coords.latitude, position.coords.longitude]);
        });
      } else {
        let latitude = 22.684282675883896;
        let longitude = 72.88051636361853;
        toast("error", "Geolocation is not supported by this browser.");
        reject([latitude, longitude]);
      }
    });
    return location;
  };

  const fetchGarages = async (MyLoc, map, lat, long, km = 10) => {
    let finder = document.querySelector('.overlay');
    finder.innerHTML = `<div class="ring"></div>`
    finder.style.zIndex = 1002;
    let locations = await (new Promise(async (resolve, reject) => {
      let data = await callAPI(`/customer/garageList/${km}/${lat}/${long}`);
      let garages = data.result;
      let leftPanel = document.getElementById('dashboard-container');
      leftPanel.innerHTML = (htmlHandler.fillHtml(data, "No garage Found..!!", "garage", "Near by Garages"));
      let result = [];
      let i = 0;
      garages.forEach(garage => {
        result[i] = [];
        result[i++].push(garage.garage_name, garage.latitude, garage.longitude, garage.thumbnail);
      });
      resolve(result);
    }));
    await loadGaragePin(MyLoc, locations, map);
    setTimeout(() => {
      finder.innerHTML = '';
      finder.style.zIndex = 0
    }, 100);

    return locations;
  }
  const loadGaragePin = (MyLoc, locations, map) => {

    const overlayMaps = {
      "Marker": MyLoc
    };
    for (var i = 0; i < locations.length; i++) {
      const myIcon = L.icon({
        iconUrl: '/uploads/' + locations[i][3],
        iconSize: [45, 45],
        className: "iconPin",
        // className: "border-2 border-sky-500",
      });
      let marker = new L.marker([locations[i][1], locations[i][2]], {
        icon: myIcon, draggable: false
      }).bindPopup(locations[i][0]).addTo(map);

      marker._icon.id = i;
      marker._icon.addEventListener('error', () => {
        marker._icon.src = "/icons/garagePin.png"
      });

      //clicked on pin
      marker._icon.addEventListener("click", (e) => {
        let inputs = document.querySelectorAll("input[name=garage]");
        inputs.forEach(garage => garage.removeAttribute('checked'))
        inputs[e.target.id].setAttribute("checked", true);
      });
    }
    // return overlayMaps
  }
  const loadMap = async () => {
    const position = await getUserLocation();
    let map = L.map('map').setView(position, 12);
    // Google layer (HTTPS URL)
    const googleStreets = L.tileLayer('https://{s}.google.com/vt?lyrs=m&x={x}&y={y}&z={z}', {
      maxZoom: 20,
      subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
    }).addTo(map);
    /*My Location Icon*/
    const myIcon = L.icon({
      iconUrl: 'https://raw.githubusercontent.com/Makwana-Bharat/pathdarshak/main/assest/Images/Location.png',
      iconSize: [50, 50],
    });
    const MyLoc = L.marker(position, { icon: myIcon, draggable: true }).addTo(map);
    let locations = await fetchGarages(MyLoc, map, position[0], position[1], 10);
    /* Layer Management*/
    MyLoc.addEventListener('dragend', async (e) => {
      let { lat, lng } = MyLoc.getLatLng();
      let range = [10, 25, 50];
      range.forEach(async km => {
        locations = await fetchGarages(MyLoc, map, lat, lng, km, MyLoc, map);
        if (locations.length)
          return
      })

    })

  }
  let valid = ["garage", "type", "vehicle", "service", "slots", "profile"]
  let active = '<%= active %>';
  if (active != 'dashboard') {
    document.querySelector('.overlay').remove();
    let index = localStorage.getItem("index");
    if (!validateStore[valid[index == -2 ? 5 : index]]()) {
      localStorage.clear();
      changePage('next');
      setActive('dashboard');
    }
    else {
      changePage('next');
      setActive('<%= active %>');
    }
  }
  else {
    changePage('next');
    setActive('<%= active %>');
  }

  (async () => {
    loadMap()
    document.querySelector('loading').innerHTML = ''
  })()
</script>

<script src="/scripts/toast.js"></script>
</body>

</html>